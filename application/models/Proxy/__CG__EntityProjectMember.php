<?php

namespace Proxy\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ProjectMember extends \Entity\ProjectMember implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setRole($role)
    {
        $this->__load();
        return parent::setRole($role);
    }

    public function getRole()
    {
        $this->__load();
        return parent::getRole();
    }

    public function setRanking($ranking)
    {
        $this->__load();
        return parent::setRanking($ranking);
    }

    public function getRanking()
    {
        $this->__load();
        return parent::getRanking();
    }

    public function setVisibility($visibility)
    {
        $this->__load();
        return parent::setVisibility($visibility);
    }

    public function getVisibility()
    {
        $this->__load();
        return parent::getVisibility();
    }

    public function setCreationTime($creationTime)
    {
        $this->__load();
        return parent::setCreationTime($creationTime);
    }

    public function getCreationTime()
    {
        $this->__load();
        return parent::getCreationTime();
    }

    public function setPastParticipantSkills($pastParticipantSkills)
    {
        $this->__load();
        return parent::setPastParticipantSkills($pastParticipantSkills);
    }

    public function getPastParticipantSkills()
    {
        $this->__load();
        return parent::getPastParticipantSkills();
    }

    public function addSkillForProject(\Entity\ProjectSkill $skillForProject)
    {
        $this->__load();
        return parent::addSkillForProject($skillForProject);
    }

    public function removeSkillForProject(\Entity\ProjectSkill $skillForProject)
    {
        $this->__load();
        return parent::removeSkillForProject($skillForProject);
    }

    public function getSkillForProject()
    {
        $this->__load();
        return parent::getSkillForProject();
    }

    public function setProject(\Entity\Project $project = NULL)
    {
        $this->__load();
        return parent::setProject($project);
    }

    public function getProject()
    {
        $this->__load();
        return parent::getProject();
    }

    public function setUser(\Entity\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'role', 'ranking', 'visibility', 'creationTime', 'past_participant_skills', 'skillForProject', 'project', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}
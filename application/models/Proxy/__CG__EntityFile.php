<?php

namespace Proxy\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class File extends \Entity\File implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setPath($path)
    {
        $this->__load();
        return parent::setPath($path);
    }

    public function getPath()
    {
        $this->__load();
        return parent::getPath();
    }

    public function setCreationTime($creationTime)
    {
        $this->__load();
        return parent::setCreationTime($creationTime);
    }

    public function getCreationTime()
    {
        $this->__load();
        return parent::getCreationTime();
    }

    public function setUploadIp($uploadIp)
    {
        $this->__load();
        return parent::setUploadIp($uploadIp);
    }

    public function getUploadIp()
    {
        $this->__load();
        return parent::getUploadIp();
    }

    public function setModifiedTime($modifiedTime)
    {
        $this->__load();
        return parent::setModifiedTime($modifiedTime);
    }

    public function getModifiedTime()
    {
        $this->__load();
        return parent::getModifiedTime();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setSubtype($subtype)
    {
        $this->__load();
        return parent::setSubtype($subtype);
    }

    public function getSubtype()
    {
        $this->__load();
        return parent::getSubtype();
    }

    public function setOwner(\Entity\User $owner = NULL)
    {
        $this->__load();
        return parent::setOwner($owner);
    }

    public function getOwner()
    {
        $this->__load();
        return parent::getOwner();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'path', 'creationTime', 'uploadIp', 'modifiedTime', 'type', 'subtype', 'owner');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}